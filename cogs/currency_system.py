import discord
from discord import app_commands
from discord.ext import commands
import os
from dotenv import load_dotenv
from pymongo import MongoClient
from datetime import datetime

# Load environment variables
load_dotenv()

# MongoDB Configuration
MONGODB_URL = os.getenv('MONGODB_URL', 'mongodb://localhost:27017/')
MONGODB_DB = os.getenv('MONGODB_DB', 'discord_bot')

class CurrencyMongoDB:
    def __init__(self):
        self.client = MongoClient(MONGODB_URL)
        self.db = self.client[MONGODB_DB]
        self.currency_collection = self.db['currency']
    
    def get_user_balance(self, user_id: str):
        """L·∫•y s·ªë d∆∞ c·ªßa user"""
        user_data = self.currency_collection.find_one({"user_id": user_id})
        if not user_data:
            return 0
        return user_data.get("balance", 0)
    
    def update_user_balance(self, user_id: str, balance: int):
        """C·∫≠p nh·∫≠t s·ªë d∆∞ c·ªßa user"""
        self.currency_collection.update_one(
            {"user_id": user_id},
            {
                "$set": {
                    "user_id": user_id,
                    "balance": balance,
                    "last_updated": datetime.utcnow()
                }
            },
            upsert=True
        )
    
    def transfer_money(self, from_user_id: str, to_user_id: str, amount: int):
        """Chuy·ªÉn ti·ªÅn gi·ªØa 2 users v·ªõi atomic update"""
        # S·ª≠ d·ª•ng MongoDB transaction ƒë·ªÉ ƒë·∫£m b·∫£o atomic update
        with self.client.start_session() as session:
            try:
                with session.start_transaction():
                    # Ki·ªÉm tra s·ªë d∆∞ ng∆∞·ªùi g·ª≠i
                    from_user_data = self.currency_collection.find_one(
                        {"user_id": from_user_id}, 
                        session=session
                    )
                    from_balance = from_user_data.get("balance", 0) if from_user_data else 0
                    
                    if from_balance < amount:
                        return False, "Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ chuy·ªÉn"
                    
                    # Atomic update cho c·∫£ 2 users
                    # Tr·ª´ ti·ªÅn ng∆∞·ªùi g·ª≠i
                    self.currency_collection.update_one(
                        {"user_id": from_user_id},
                        {
                            "$set": {
                                "user_id": from_user_id,
                                "balance": from_balance - amount,
                                "last_updated": datetime.utcnow()
                            }
                        },
                        upsert=True,
                        session=session
                    )
                    
                    # C·ªông ti·ªÅn ng∆∞·ªùi nh·∫≠n
                    self.currency_collection.update_one(
                        {"user_id": to_user_id},
                        {
                            "$inc": {"balance": amount},
                            "$set": {
                                "user_id": to_user_id,
                                "last_updated": datetime.utcnow()
                            }
                        },
                        upsert=True,
                        session=session
                    )
                    
                    # Log transaction
                    transaction_data = {
                        "from_user_id": from_user_id,
                        "to_user_id": to_user_id,
                        "amount": amount,
                        "type": "transfer",
                        "timestamp": datetime.utcnow()
                    }
                    self.db['transactions'].insert_one(transaction_data, session=session)
                    
                    return True, "Chuy·ªÉn ti·ªÅn th√†nh c√¥ng"
                    
            except Exception as e:
                return False, f"L·ªói giao d·ªãch: {str(e)}"
    
    def log_transaction(self, from_user_id: str, to_user_id: str, amount: int, transaction_type: str):
        """Log giao d·ªãch"""
        transaction_data = {
            "from_user_id": from_user_id,
            "to_user_id": to_user_id,
            "amount": amount,
            "type": transaction_type,
            "timestamp": datetime.utcnow()
        }
        self.db['transactions'].insert_one(transaction_data)
    
    def get_richest_users(self, limit: int = 10):
        """L·∫•y top users gi√†u nh·∫•t"""
        return list(self.currency_collection.find().sort([("balance", -1)]).limit(limit))
    
    def get_all_users_with_money(self):
        """L·∫•y t·∫•t c·∫£ users c√≥ ti·ªÅn (ƒë·ªÉ hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng)"""
        return list(self.currency_collection.find({"balance": {"$gt": 0}}).sort([("balance", -1)]))
    
    def create_leaderboard_embed(self, guild):
        """T·∫°o embed cho b·∫£ng x·∫øp h·∫°ng"""
        all_users = self.get_all_users_with_money()
        
        if not all_users:
            embed = discord.Embed(
                title="üí∞ B·∫£ng x·∫øp h·∫°ng ti·ªÅn t·ªá",
                description="Ch∆∞a c√≥ ai c√≥ ti·ªÅn trong server n√†y.",
                color=discord.Color.gold()
            )
            embed.set_footer(text=f"C·∫≠p nh·∫≠t l√∫c: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}")
            return embed

        embed = discord.Embed(
            title="üí∞ B·∫£ng x·∫øp h·∫°ng ti·ªÅn t·ªá",
            color=discord.Color.gold()
        )
        
        description_lines = []
        for i, user_data in enumerate(all_users[:20], start=1):  # Gi·ªõi h·∫°n 20 ng∆∞·ªùi
            user_id = user_data["user_id"]
            member = guild.get_member(int(user_id))
            
            if member:
                name = member.display_name
                # Truncate t√™n n·∫øu qu√° d√†i
                if len(name) > 20:
                    name = name[:17] + "..."
            else:
                name = f"User-{user_id[-4:]}"  # Hi·ªÉn th·ªã 4 ch·ªØ s·ªë cu·ªëi c·ªßa ID
            
            balance = user_data["balance"]
            
            # Th√™m emoji cho top 3
            if i == 1:
                rank_emoji = "ü•á"
            elif i == 2:
                rank_emoji = "ü•à" 
            elif i == 3:
                rank_emoji = "ü•â"
            else:
                rank_emoji = f"#{i:02d}"
            
            description_lines.append(f"{rank_emoji} {name}: **{balance:,} VNƒê**")
        
        embed.description = "\n".join(description_lines)
        embed.set_footer(text=f"T·ªïng {len(all_users)} ng∆∞·ªùi c√≥ ti·ªÅn ‚Ä¢ C·∫≠p nh·∫≠t: {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}")
        
        return embed
    
    def initialize_all_members(self, guild, initial_amount: int = 10000):
        """Kh·ªüi t·∫°o ti·ªÅn cho t·∫•t c·∫£ members hi·ªán t·∫°i"""
        initialized_count = 0
        for member in guild.members:
            if not member.bot:  # Kh√¥ng t√≠nh bot
                current_balance = self.get_user_balance(str(member.id))
                if current_balance == 0:  # Ch·ªâ init n·∫øu ch∆∞a c√≥ ti·ªÅn
                    self.update_user_balance(str(member.id), initial_amount)
                    initialized_count += 1
        return initialized_count
    
    def add_money_to_all_members(self, guild, amount: int):
        """Th√™m ti·ªÅn cho t·∫•t c·∫£ members (k·ªÉ c·∫£ ƒë√£ c√≥ ti·ªÅn)"""
        updated_count = 0
        for member in guild.members:
            if not member.bot:  # Kh√¥ng t√≠nh bot
                current_balance = self.get_user_balance(str(member.id))
                new_balance = current_balance + amount
                self.update_user_balance(str(member.id), new_balance)
                updated_count += 1
        return updated_count
    
    def close(self):
        """ƒê√≥ng k·∫øt n·ªëi MongoDB"""
        self.client.close()

class CurrencySystem(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = CurrencyMongoDB()
        self.initial_amount = 10000  # S·ªë ti·ªÅn kh·ªüi t·∫°o
        self.leaderboard_channel_id = 1410120603167494214  # Channel ID ƒë·ªÉ c·∫≠p nh·∫≠t b·∫£ng x·∫øp h·∫°ng
        
        # C·∫•u h√¨nh role permissions (c√≥ th·ªÉ thay ƒë·ªïi theo server)
        self.admin_roles = ["Admin", "Moderator", "Owner"]  # Roles c√≥ quy·ªÅn admin
        self.vip_roles = ["VIP", "Premium", "Supporter"]   # Roles c√≥ quy·ªÅn ƒë·∫∑c bi·ªát
    
    def has_admin_permission(self, member: discord.Member) -> bool:
        """Ki·ªÉm tra xem user c√≥ quy·ªÅn admin kh√¥ng"""
        # Ki·ªÉm tra permission admin
        if member.guild_permissions.administrator:
            return True
        
        # Ki·ªÉm tra role admin
        user_roles = [role.name for role in member.roles]
        return any(role in self.admin_roles for role in user_roles)
    
    def has_vip_permission(self, member: discord.Member) -> bool:
        """Ki·ªÉm tra xem user c√≥ quy·ªÅn VIP kh√¥ng"""
        user_roles = [role.name for role in member.roles]
        return any(role in self.vip_roles for role in user_roles)

    def cog_unload(self):
        """ƒê√≥ng k·∫øt n·ªëi MongoDB khi unload cog"""
        self.db.close()

    async def update_leaderboard_channel(self, guild):
        """C·∫≠p nh·∫≠t b·∫£ng x·∫øp h·∫°ng trong channel ch·ªâ ƒë·ªãnh"""
        try:
            channel = guild.get_channel(self.leaderboard_channel_id)
            if not channel:
                return
            
            # T·∫°o embed m·ªõi
            embed = self.db.create_leaderboard_embed(guild)
            
            # T√¨m message c≈© ƒë·ªÉ edit ho·∫∑c g·ª≠i message m·ªõi
            async for message in channel.history(limit=10):
                if message.author == self.bot.user and message.embeds:
                    if message.embeds[0].title == "üí∞ B·∫£ng x·∫øp h·∫°ng ti·ªÅn t·ªá":
                        await message.edit(embed=embed)
                        return
            
            # N·∫øu kh√¥ng t√¨m th·∫•y message c≈©, g·ª≠i message m·ªõi
            await channel.send(embed=embed)
            
        except Exception as e:
            print(f"L·ªói c·∫≠p nh·∫≠t leaderboard: {e}")

    @commands.Cog.listener()
    async def on_member_join(self, member: discord.Member):
        """T·ª± ƒë·ªông t·∫∑ng ti·ªÅn khi user join server"""
        if not member.bot:  # Kh√¥ng t√≠nh bot
            self.db.update_user_balance(str(member.id), self.initial_amount)
            try:
                embed = discord.Embed(
                    title="üéâ Ch√†o m·ª´ng ƒë·∫øn server!",
                    description=f"B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c **{self.initial_amount:,} VNƒê** ƒë·ªÉ b·∫Øt ƒë·∫ßu!",
                    color=discord.Color.green()
                )
                embed.add_field(name="Server", value=member.guild.name, inline=True)
                embed.add_field(name="S·ªë d∆∞ hi·ªán t·∫°i", value=f"{self.initial_amount:,} VNƒê", inline=True)
                embed.set_footer(text="S·ª≠ d·ª•ng /balance ƒë·ªÉ xem s·ªë d∆∞")
                
                await member.send(embed=embed)
            except discord.Forbidden:
                pass  # Kh√¥ng th·ªÉ g·ª≠i DM
            
            # C·∫≠p nh·∫≠t b·∫£ng x·∫øp h·∫°ng khi c√≥ user m·ªõi join
            await self.update_leaderboard_channel(member.guild)

    @app_commands.command(name="balance", description="Xem s·ªë d∆∞ hi·ªán t·∫°i c·ªßa b·∫°n ho·∫∑c user kh√°c")
    @app_commands.guilds(int(os.getenv("GUILD_ID")))
    @app_commands.describe(user="User mu·ªën xem s·ªë d∆∞ (ƒë·ªÉ tr·ªëng ƒë·ªÉ xem s·ªë d∆∞ c·ªßa b·∫£n th√¢n)")
    async def balance(self, interaction: discord.Interaction, user: discord.Member = None):
        """Hi·ªÉn th·ªã s·ªë d∆∞ c·ªßa user"""
        target_user = user if user else interaction.user
        user_id = str(target_user.id)
        balance = self.db.get_user_balance(user_id)
        
        embed = discord.Embed(
            title=f"üí∞ S·ªë d∆∞ c·ªßa {target_user.display_name}",
            color=discord.Color.gold()
        )
        embed.add_field(name="S·ªë d∆∞ hi·ªán t·∫°i", value=f"{balance:,} VNƒê", inline=False)
        embed.set_thumbnail(url=target_user.display_avatar.url)
        embed.set_footer(text="S·ª≠ d·ª•ng /transfer ƒë·ªÉ chuy·ªÉn ti·ªÅn cho ng∆∞·ªùi kh√°c")
        
        await interaction.response.send_message(embed=embed)

    @app_commands.command(name="transfer", description="Chuy·ªÉn ti·ªÅn cho user kh√°c")
    @app_commands.guilds(int(os.getenv("GUILD_ID")))
    @app_commands.describe(
        recipient="User nh·∫≠n ti·ªÅn",
        amount="S·ªë ti·ªÅn mu·ªën chuy·ªÉn"
    )
    async def transfer(self, interaction: discord.Interaction, recipient: discord.Member, amount: int):
        """Chuy·ªÉn ti·ªÅn cho user kh√°c"""
        sender_id = str(interaction.user.id)
        recipient_id = str(recipient.id)
        
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán
        if recipient.bot:
            await interaction.response.send_message("‚ùå Kh√¥ng th·ªÉ chuy·ªÉn ti·ªÅn cho bot!", ephemeral=True)
            return
        
        if sender_id == recipient_id:
            await interaction.response.send_message("‚ùå Kh√¥ng th·ªÉ chuy·ªÉn ti·ªÅn cho ch√≠nh m√¨nh!", ephemeral=True)
            return
        
        if amount <= 0:
            await interaction.response.send_message("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!", ephemeral=True)
            return
        
        if amount > 1000000:  # Gi·ªõi h·∫°n 1 tri·ªáu VNƒê m·ªói l·∫ßn chuy·ªÉn
            await interaction.response.send_message("‚ùå Kh√¥ng th·ªÉ chuy·ªÉn qu√° 1,000,000 VNƒê m·ªói l·∫ßn!", ephemeral=True)
            return
        
        # Th·ª±c hi·ªán chuy·ªÉn ti·ªÅn
        success, message = self.db.transfer_money(sender_id, recipient_id, amount)
        
        if success:
            # L·∫•y s·ªë d∆∞ m·ªõi
            sender_balance = self.db.get_user_balance(sender_id)
            recipient_balance = self.db.get_user_balance(recipient_id)
            
            embed = discord.Embed(
                title="‚úÖ Chuy·ªÉn ti·ªÅn th√†nh c√¥ng!",
                color=discord.Color.green()
            )
            embed.add_field(name="Ng∆∞·ªùi g·ª≠i", value=interaction.user.mention, inline=True)
            embed.add_field(name="Ng∆∞·ªùi nh·∫≠n", value=recipient.mention, inline=True)
            embed.add_field(name="S·ªë ti·ªÅn", value=f"{amount:,} VNƒê", inline=True)
            embed.add_field(name="S·ªë d∆∞ c√≤n l·∫°i", value=f"{sender_balance:,} VNƒê", inline=True)
            embed.add_field(name="S·ªë d∆∞ ng∆∞·ªùi nh·∫≠n", value=f"{recipient_balance:,} VNƒê", inline=True)
            embed.set_footer(text=f"Giao d·ªãch l√∫c {datetime.now().strftime('%H:%M:%S %d/%m/%Y')}")
            
            await interaction.response.send_message(embed=embed)
            
            # C·∫≠p nh·∫≠t b·∫£ng x·∫øp h·∫°ng trong channel
            await self.update_leaderboard_channel(interaction.guild)
            
            # Th√¥ng b√°o cho ng∆∞·ªùi nh·∫≠n
            try:
                notify_embed = discord.Embed(
                    title="üí∞ B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c ti·ªÅn!",
                    description=f"{interaction.user.display_name} ƒë√£ chuy·ªÉn cho b·∫°n **{amount:,} VNƒê**",
                    color=discord.Color.green()
                )
                notify_embed.add_field(name="S·ªë d∆∞ m·ªõi", value=f"{recipient_balance:,} VNƒê", inline=True)
                notify_embed.add_field(name="Server", value=interaction.guild.name, inline=True)
                
                await recipient.send(embed=notify_embed)
            except discord.Forbidden:
                pass  # Kh√¥ng th·ªÉ g·ª≠i DM
        else:
            embed = discord.Embed(
                title="‚ùå Chuy·ªÉn ti·ªÅn th·∫•t b·∫°i!",
                description=message,
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)

    @app_commands.command(name="richest", description="Xem b·∫£ng x·∫øp h·∫°ng ng∆∞·ªùi gi√†u nh·∫•t")
    @app_commands.guilds(int(os.getenv("GUILD_ID")))
    async def richest(self, interaction: discord.Interaction):
        """Hi·ªÉn th·ªã b·∫£ng x·∫øp h·∫°ng ng∆∞·ªùi gi√†u nh·∫•t"""
        richest_data = self.db.get_richest_users(10)
        
        if not richest_data:
            await interaction.response.send_message("Ch∆∞a c√≥ ai c√≥ ti·ªÅn c·∫£.", ephemeral=True)
            return

        embed = discord.Embed(
            title="üíé B·∫£ng x·∫øp h·∫°ng ng∆∞·ªùi gi√†u nh·∫•t",
            color=discord.Color.gold()
        )

        for i, user_data in enumerate(richest_data, start=1):
            user_id = user_data["user_id"]
            user = self.bot.get_user(int(user_id))
            name = user.name if user else f"Unknown User ({user_id})"
            
            balance = user_data["balance"]
            
            # Th√™m emoji cho top 3
            if i == 1:
                rank_emoji = "ü•á"
            elif i == 2:
                rank_emoji = "ü•à"
            elif i == 3:
                rank_emoji = "ü•â"
            else:
                rank_emoji = f"#{i}"
            
            embed.add_field(
                name=f"{rank_emoji} {name}",
                value=f"üí∞ {balance:,} VNƒê",
                inline=False
            )

        await interaction.response.send_message(embed=embed)

    @app_commands.command(name="init_currency", description="[ADMIN] Kh·ªüi t·∫°o ti·ªÅn cho t·∫•t c·∫£ members hi·ªán t·∫°i")
    @app_commands.guilds(int(os.getenv("GUILD_ID")))
    async def init_currency(self, interaction: discord.Interaction):
        """Kh·ªüi t·∫°o ti·ªÅn cho t·∫•t c·∫£ members hi·ªán t·∫°i (ch·ªâ admin)"""
        # Ki·ªÉm tra quy·ªÅn admin
        if not self.has_admin_permission(interaction.user):
            await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
            return
        
        await interaction.response.defer()
        
        # Kh·ªüi t·∫°o ti·ªÅn cho t·∫•t c·∫£ members
        initialized_count = self.db.initialize_all_members(interaction.guild, self.initial_amount)
        
        embed = discord.Embed(
            title="‚úÖ Kh·ªüi t·∫°o ti·ªÅn t·ªá th√†nh c√¥ng!",
            color=discord.Color.green()
        )
        embed.add_field(name="S·ªë ng∆∞·ªùi ƒë∆∞·ª£c kh·ªüi t·∫°o", value=f"{initialized_count} users", inline=True)
        embed.add_field(name="S·ªë ti·ªÅn m·ªói ng∆∞·ªùi", value=f"{self.initial_amount:,} VNƒê", inline=True)
        embed.add_field(name="T·ªïng ti·ªÅn ph√°t ra", value=f"{initialized_count * self.initial_amount:,} VNƒê", inline=True)
        embed.set_footer(text="Ch·ªâ kh·ªüi t·∫°o cho users ch∆∞a c√≥ ti·ªÅn")
        
        await interaction.followup.send(embed=embed)
        
        # C·∫≠p nh·∫≠t b·∫£ng x·∫øp h·∫°ng
        await self.update_leaderboard_channel(interaction.guild)

    @app_commands.command(name="add_money", description="[ADMIN] Th√™m ti·ªÅn cho user")
    @app_commands.guilds(int(os.getenv("GUILD_ID")))
    @app_commands.describe(
        user="User nh·∫≠n ti·ªÅn",
        amount="S·ªë ti·ªÅn mu·ªën th√™m"
    )
    async def add_money(self, interaction: discord.Interaction, user: discord.Member, amount: int):
        """Th√™m ti·ªÅn cho user (ch·ªâ admin)"""
        # Ki·ªÉm tra quy·ªÅn admin
        if not self.has_admin_permission(interaction.user):
            await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
            return
        
        if amount <= 0:
            await interaction.response.send_message("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!", ephemeral=True)
            return
        
        user_id = str(user.id)
        current_balance = self.db.get_user_balance(user_id)
        new_balance = current_balance + amount
        
        self.db.update_user_balance(user_id, new_balance)
        
        embed = discord.Embed(
            title="‚úÖ ƒê√£ th√™m ti·ªÅn th√†nh c√¥ng!",
            color=discord.Color.green()
        )
        embed.add_field(name="User", value=user.mention, inline=True)
        embed.add_field(name="S·ªë ti·ªÅn th√™m", value=f"+{amount:,} VNƒê", inline=True)
        embed.add_field(name="S·ªë d∆∞ m·ªõi", value=f"{new_balance:,} VNƒê", inline=True)
        embed.set_footer(text=f"Admin: {interaction.user.display_name}")
        
        await interaction.response.send_message(embed=embed)
        
        # C·∫≠p nh·∫≠t b·∫£ng x·∫øp h·∫°ng trong channel
        await self.update_leaderboard_channel(interaction.guild)

    @app_commands.command(name="update_leaderboard", description="[ADMIN] C·∫≠p nh·∫≠t b·∫£ng x·∫øp h·∫°ng trong channel")
    @app_commands.guilds(int(os.getenv("GUILD_ID")))
    async def update_leaderboard(self, interaction: discord.Interaction):
        """C·∫≠p nh·∫≠t b·∫£ng x·∫øp h·∫°ng th·ªß c√¥ng (ch·ªâ admin)"""
        # Ki·ªÉm tra quy·ªÅn admin
        if not self.has_admin_permission(interaction.user):
            await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
            return
        
        await interaction.response.defer(ephemeral=True)
        
        # C·∫≠p nh·∫≠t b·∫£ng x·∫øp h·∫°ng
        await self.update_leaderboard_channel(interaction.guild)
        
        embed = discord.Embed(
            title="‚úÖ ƒê√£ c·∫≠p nh·∫≠t b·∫£ng x·∫øp h·∫°ng!",
            description=f"B·∫£ng x·∫øp h·∫°ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t trong <#{self.leaderboard_channel_id}>",
            color=discord.Color.green()
        )
        embed.set_footer(text=f"Admin: {interaction.user.display_name}")
        
        await interaction.followup.send(embed=embed)

    @app_commands.command(name="add_money_all", description="[ADMIN] Th√™m ti·ªÅn cho t·∫•t c·∫£ members")
    @app_commands.guilds(int(os.getenv("GUILD_ID")))
    @app_commands.describe(amount="S·ªë ti·ªÅn mu·ªën th√™m cho m·ªói ng∆∞·ªùi")
    async def add_money_all(self, interaction: discord.Interaction, amount: int):
        """Th√™m ti·ªÅn cho t·∫•t c·∫£ members (ch·ªâ admin)"""
        # Ki·ªÉm tra quy·ªÅn admin
        if not self.has_admin_permission(interaction.user):
            await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
            return
        
        if amount <= 0:
            await interaction.response.send_message("‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0!", ephemeral=True)
            return
        
        if amount > 100000:  # Gi·ªõi h·∫°n 100k VNƒê m·ªói l·∫ßn ƒë·ªÉ tr√°nh abuse
            await interaction.response.send_message("‚ùå Kh√¥ng th·ªÉ th√™m qu√° 100,000 VNƒê m·ªói l·∫ßn cho t·∫•t c·∫£!", ephemeral=True)
            return
        
        await interaction.response.defer()
        
        # Th√™m ti·ªÅn cho t·∫•t c·∫£ members
        updated_count = self.db.add_money_to_all_members(interaction.guild, amount)
        total_money = updated_count * amount
        
        embed = discord.Embed(
            title="‚úÖ ƒê√£ th√™m ti·ªÅn cho t·∫•t c·∫£ th√†nh c√¥ng!",
            color=discord.Color.green()
        )
        embed.add_field(name="S·ªë ng∆∞·ªùi nh·∫≠n ti·ªÅn", value=f"{updated_count} users", inline=True)
        embed.add_field(name="S·ªë ti·ªÅn m·ªói ng∆∞·ªùi", value=f"+{amount:,} VNƒê", inline=True)
        embed.add_field(name="T·ªïng ti·ªÅn ph√°t ra", value=f"{total_money:,} VNƒê", inline=True)
        embed.add_field(name="L√Ω do", value="Ph√°t ti·ªÅn cho t·∫•t c·∫£ members", inline=False)
        embed.set_footer(text=f"Admin: {interaction.user.display_name}")
        
        await interaction.followup.send(embed=embed)
        
        # C·∫≠p nh·∫≠t b·∫£ng x·∫øp h·∫°ng
        await self.update_leaderboard_channel(interaction.guild)

    @app_commands.command(name="vip_balance", description="[VIP] Xem s·ªë d∆∞ v·ªõi th√¥ng tin chi ti·∫øt")
    @app_commands.guilds(int(os.getenv("GUILD_ID")))
    @app_commands.describe(user="User mu·ªën xem s·ªë d∆∞ (ƒë·ªÉ tr·ªëng ƒë·ªÉ xem s·ªë d∆∞ c·ªßa b·∫£n th√¢n)")
    async def vip_balance(self, interaction: discord.Interaction, user: discord.Member = None):
        """Hi·ªÉn th·ªã s·ªë d∆∞ v·ªõi th√¥ng tin chi ti·∫øt cho VIP"""
        # Ki·ªÉm tra quy·ªÅn VIP ho·∫∑c Admin
        if not (self.has_vip_permission(interaction.user) or self.has_admin_permission(interaction.user)):
            await interaction.response.send_message("‚ùå L·ªánh n√†y ch·ªâ d√†nh cho VIP v√† Admin!", ephemeral=True)
            return
        
        target_user = user if user else interaction.user
        user_id = str(target_user.id)
        balance = self.db.get_user_balance(user_id)
        
        # L·∫•y th√™m th√¥ng tin giao d·ªãch
        transactions = list(self.db.db['transactions'].find({
            "$or": [
                {"from_user_id": user_id},
                {"to_user_id": user_id}
            ]
        }).sort([("timestamp", -1)]).limit(5))
        
        embed = discord.Embed(
            title=f"üíé S·ªë d∆∞ VIP c·ªßa {target_user.display_name}",
            color=discord.Color.purple()
        )
        embed.add_field(name="üí∞ S·ªë d∆∞ hi·ªán t·∫°i", value=f"{balance:,} VNƒê", inline=True)
        embed.add_field(name="üìä X·∫øp h·∫°ng", value="üîç ƒêang t√≠nh...", inline=True)
        embed.add_field(name="üéØ Tr·∫°ng th√°i", value="VIP Member", inline=True)
        
        # Hi·ªÉn th·ªã giao d·ªãch g·∫ßn ƒë√¢y
        if transactions:
            recent_transactions = []
            for tx in transactions[:3]:
                if tx["from_user_id"] == user_id:
                    recent_transactions.append(f"üì§ -{tx['amount']:,} VNƒê")
                else:
                    recent_transactions.append(f"üì• +{tx['amount']:,} VNƒê")
            
            embed.add_field(
                name="üìà Giao d·ªãch g·∫ßn ƒë√¢y",
                value="\n".join(recent_transactions),
                inline=False
            )
        
        embed.set_thumbnail(url=target_user.display_avatar.url)
        embed.set_footer(text="‚ú® VIP Feature ‚Ä¢ S·ª≠ d·ª•ng /transfer ƒë·ªÉ chuy·ªÉn ti·ªÅn")
        
        await interaction.response.send_message(embed=embed)

    @app_commands.command(name="config_roles", description="[ADMIN] C·∫•u h√¨nh roles cho h·ªá th·ªëng")
    @app_commands.guilds(int(os.getenv("GUILD_ID")))
    @app_commands.describe(
        role_type="Lo·∫°i role mu·ªën c·∫•u h√¨nh",
        action="Th√™m ho·∫∑c x√≥a role",
        role_name="T√™n role"
    )
    @app_commands.choices(
        role_type=[
            app_commands.Choice(name="Admin Roles", value="admin"),
            app_commands.Choice(name="VIP Roles", value="vip")
        ],
        action=[
            app_commands.Choice(name="Th√™m", value="add"),
            app_commands.Choice(name="X√≥a", value="remove"),
            app_commands.Choice(name="Xem danh s√°ch", value="list")
        ]
    )
    async def config_roles(self, interaction: discord.Interaction, role_type: str, action: str, role_name: str = None):
        """C·∫•u h√¨nh roles cho h·ªá th·ªëng (ch·ªâ admin)"""
        # Ki·ªÉm tra quy·ªÅn admin
        if not self.has_admin_permission(interaction.user):
            await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
            return
        
        role_list = self.admin_roles if role_type == "admin" else self.vip_roles
        role_name_display = "Admin" if role_type == "admin" else "VIP"
        
        embed = discord.Embed(
            title=f"‚öôÔ∏è C·∫•u h√¨nh {role_name_display} Roles",
            color=discord.Color.blue()
        )
        
        if action == "list":
            if role_list:
                embed.add_field(
                    name=f"üìã Danh s√°ch {role_name_display} Roles",
                    value="\n".join([f"‚Ä¢ {role}" for role in role_list]),
                    inline=False
                )
            else:
                embed.add_field(
                    name=f"üìã Danh s√°ch {role_name_display} Roles",
                    value="Ch∆∞a c√≥ role n√†o ƒë∆∞·ª£c c·∫•u h√¨nh",
                    inline=False
                )
        
        elif action == "add":
            if not role_name:
                await interaction.response.send_message("‚ùå Vui l√≤ng nh·∫≠p t√™n role ƒë·ªÉ th√™m!", ephemeral=True)
                return
            
            if role_name not in role_list:
                role_list.append(role_name)
                embed.add_field(
                    name="‚úÖ Th√™m th√†nh c√¥ng",
                    value=f"ƒê√£ th√™m role `{role_name}` v√†o danh s√°ch {role_name_display}",
                    inline=False
                )
            else:
                embed.add_field(
                    name="‚ö†Ô∏è Role ƒë√£ t·ªìn t·∫°i",
                    value=f"Role `{role_name}` ƒë√£ c√≥ trong danh s√°ch {role_name_display}",
                    inline=False
                )
        
        elif action == "remove":
            if not role_name:
                await interaction.response.send_message("‚ùå Vui l√≤ng nh·∫≠p t√™n role ƒë·ªÉ x√≥a!", ephemeral=True)
                return
            
            if role_name in role_list:
                role_list.remove(role_name)
                embed.add_field(
                    name="‚úÖ X√≥a th√†nh c√¥ng",
                    value=f"ƒê√£ x√≥a role `{role_name}` kh·ªèi danh s√°ch {role_name_display}",
                    inline=False
                )
            else:
                embed.add_field(
                    name="‚ùå Role kh√¥ng t·ªìn t·∫°i",
                    value=f"Role `{role_name}` kh√¥ng c√≥ trong danh s√°ch {role_name_display}",
                    inline=False
                )
        
        embed.set_footer(text=f"Admin: {interaction.user.display_name}")
        await interaction.response.send_message(embed=embed, ephemeral=True)

async def setup(bot):
    await bot.add_cog(CurrencySystem(bot))
